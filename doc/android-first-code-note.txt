


第一行代码读书笔记思维导图
https://pic3.zhimg.com/f580d9169d8292417d0c72935fcc983a_r.jpg



第一章 安卓简介


2003.10 andy Rubin  android公司
2005.08 谷歌收购
2008.09 1.0
2011.02 3.0
2011.10 4.0





系统架构 
linux内核 系统运行层  应用框架曾  用用层

四大组件 activity  service broadcat ContentProvider

控件 SqlLite LBS 多媒体 传感器

Dalvik虚拟机


开发环境 
Android SDK
eclipse ADT
Android Studio

AndroidManifest.xml
LogCat工具 

assets  程序动态读取的文件  webview 加载本地网页


<activity
android:name="com.test.helloworld.HelloWorldActivity"
android:label="@string/app_name" >
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>

setContentView(R.layout.hello_world_layout);

getMenuInflater().inflate(R.menu.hello_world, menu);


菜单 option menu  context menu

onCreateOptionsMenu
android:text="@string/hello_world"

字符串定义 res/values/strings.xml




第二章 activity

Intent 显示 隐式
activity生命周期
不可见 可见 获取焦点
4中启动模式   standard singleTop SingleTask singleInstance
使用task来管理活动 一个task是一个活动栈
出栈入栈
如何查看task     adb shell dumpsys activity

 Running activities (most recent first):
   TaskRecord{b3ac20a8 #10 A com.dyyx.androidhello.MainActivity U 0}
     Run #2: ActivityRecord{b3aca2d8 com.dyyx.androidhello/.ListViewActivity}
     Run #1: ActivityRecord{b3899b48 com.dyyx.androidhello/.MainActivity}

 隐藏标题栏

requestWindowFeature(Window.FEATURE_NO_TITLE);
setContentView(R.layout.first_layout);


requestWindowFeature 需要在 setContentView 之前

Toast.makeText(FirstActivity.this, "You clicked Button 1",Toast.LENGTH_SHORT).show();

findViewById 


<menu xmlns:android="http://schemas.android.com/apk/res/android" >
<item
android:id="@+id/add_item"
android:title="Add"/>
<item
android:id="@+id/remove_item"
android:title="Remove"/>
</menu>

public boolean onCreateOptionsMenu(Menu menu) {
getMenuInflater().inflate(R.menu.main, menu);
return true;
}

public boolean onOptionsItemSelected(MenuItem item) {
switch (item.getItemId()) {
case R.id.add_item:
Toast.makeText(this, "You clicked Add", Toast.LENGTH_SHORT).show();
break;
case R.id.remove_item:
Toast.makeText(this, "You clicked Remove", Toast.LENGTH_SHORT).show();
break;
default:
}
return true;
}

销毁当前活动 finish()

Intent  
显式 Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
隐式 Intent intent = new Intent("com.example.activitytest.ACTION_START");



<activity android:name=".SecondActivity" >
<intent-filter>
<action android:name="com.example.activitytest.ACTION_START" />
<category android:name="android.intent.category.DEFAULT" />
</intent-filter>
</activity>

打开浏览器 

Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.baidu.com"));
startActivity(intent);

setData

schema host port  path mimeType

拨打电话界面 

Intent intent = new Intent(Intent.ACTION_DIAL);
intent.setData(Uri.parse("tel:10086"));
startActivity(intent);

传递参数

String data = "Hello SecondActivity";
Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
intent.putExtra("extra_data", data);
startActivity(intent);

获取参数

Intent intent = getIntent();
String data = intent.getStringExtra("extra_data");

返回数据给上一个活动
startActivityForResult()

Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
startActivityForResult(intent, 1);




Intent intent = new Intent();
intent.putExtra("data_return", "Hello FirstActivity");
setResult(RESULT_OK, intent);
finish();

protected void onActivityResult(int requestCode, int resultCode, Intent data) {
switch (requestCode) {
case 1:
if (resultCode == RESULT_OK) {
String returnedData = data.getStringExtra("data_return");
Log.d("FirstActivity", returnedData);
}
break;
default:
}
}

返回键 onBackPressed




DialogActivity
<activity android:name=".DialogActivity" android:theme="@android:style/ Theme.Dialog" >



第三章  UI控件
 P87 

xmlns:android="http://schemas.android.com/apk/res/android"

基本布局  TextView EditText Button  
常用控件
match_parent fill_parent wrap_content
match_parent fill_parent 效果相同 推荐用 match_parent
TextView android:gravity="center"  文字居中
android:textSize="24sp"
android:textColor="#00ff00"

EditText 
android:hint="input something here"
android:maxLines="2"

click事件监听接口 OnClickListener

String inputText = editText.getText().toString();
Toast.makeText(MainActivity.this, inputText, Toast.LENGTH_SHORT).show();

ImageView
android:src="@drawable/ic_launcher"

imageView.setImageResource(R.drawable.jelly_bean);

ProgressBar
android:visibility

visible invisible gone

invisible 不可见，但仍然占据着原来的位置和大小，可以理解成变透明了
gone 不可见且不占用空间

setVisibility()方法 View.VISIBLE View.INVISIBLE View.GONE

通过 android:max属性给进度条设置一个最大值，然后在代码中动态地设置进度

int progress = progressBar.getProgress();
progress = progress + 10;
progressBar.setProgress(progress);

ProgressBar 样式 圆形进度条 水平进度条 style

      style="@android:style/Widget.ProgressBar.Horizontal"
  android:max="100"
 android:progress="50"

AlertDialog

AlertDialog.Builder

setPositiveButton()设置确定按钮点击事件
setNegativeButton()设置取消按钮点击事件

ProgressDialog

ProgressDialog progressDialog = new ProgressDialog (MainActivity.this);
progressDialog.setTitle("This is ProgressDialog");
progressDialog.setMessage("Loading...");
progressDialog.setCancelable(true);
progressDialog.show();

setCancelable()设置 false，表示不能通过Back键取消

dismiss()关闭对话框


layout

android:orientation   vertical  horizontal


android:layout_gravity  VS android:gravity

android:layout_gravity 用于指定控件在布局中的对齐方式

当LinearLayout的排列方向是horizontal时，只有垂直方向上的对齐方式才会生效


<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal" >

<Button
android:id="@+id/button1"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="top"
android:text="Button 1" />
<Button
android:id="@+id/button2"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="center_vertical"
android:text="Button 2" />
<Button
android:id="@+id/button3"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="bottom"
android:text="Button 3" />
</LinearLayout>

android:layout_weigh


<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal" >
<EditText
android:id="@+id/input_message"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:layout_weight="1"
android:hint="Type something"
/>
<Button
android:id="@+id/send"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Send"
/>
</LinearLayout>

Button 宽度按照wrap_content计算 EditText会占满屏幕所有的剩余空间


RelativeLayout p117


RelativeLayout
相对于父布局
android:layout_alignParentLeft="true"
android:layout_alignParentTop="true"

android:layout_alignParentRight="true"
android:layout_alignParentTop="true"

android:layout_centerInParent="true"

android:layout_alignParentBottom="true"
android:layout_alignParentLeft="true"

android:layout_alignParentBottom="true"
android:layout_alignParentRight="true"


相对于指定控件


android:layout_above="@id/button3"
android:layout_toRightOf="@id/button3"

FrameLayout

TableLayout

TableRow

android:layout_span="2"
android:stretchColumns="1"  第二列拉伸




自定义控件

View ViewGroup


android:background="@drawable/title_bg"
自定义标题栏
back按钮 标题 编辑按钮
android:layout_margin="5dip"

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" >
<include layout="@layout/title" />
</LinearLayout>

include


public class TitleLayout extends LinearLayout {
public TitleLayout(Context context, AttributeSet attrs) {
super(context, attrs);
LayoutInflater.from(context).inflate(R.layout.title, this);
}
}

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" >
<com.example.uicustomviews.TitleLayout
android:layout_width="match_parent"
android:layout_height="wrap_content"
></com.example.uicustomviews.TitleLayout>
</LinearLayout>

增加事件处理函数

ListView

<ListView
android:id="@+id/list_view"
android:layout_width="match_parent"
android:layout_height="match_parent" >
</ListView>

private String[] data = { "Apple", "Banana", "Orange", "Watermelon",
"Pear", "Grape", "Pineapple", "Strawberry", "Cherry", "Mango" };

ArrayAdapter<String> adapter = new ArrayAdapter<String>(
MainActivity.this, android.R.layout.simple_list_item_1, data);
ListView listView = (ListView) findViewById(R.id.list_view);
listView.setAdapter(adapter);

 /**
     * Constructor
     *
     * @param context The current context.
     * @param resource The resource ID for a layout file containing a TextView to use when
     *                 instantiating views.
     * @param objects The objects to represent in the ListView.
     */
    public ArrayAdapter(Context context, int resource, T[] objects) {
        init(context, resource, 0, Arrays.asList(objects));
    }

android.R.layout.simple_list_item_1 作为ListView子项布局的id，
这是一个Android内置的布局文件，里面只有一个TextView，可用于简单地显示一段文本



public class Fruit {
private String name;
private int imageId;


fruit_item.xml
  ImageView TextView

public class FruitAdapter extends ArrayAdapter<Fruit> {
private int resourceId;
public FruitAdapter(Context context, int textViewResourceId,
List<Fruit> objects) {
super(context, textViewResourceId, objects);
resourceId = textViewResourceId;
}
@Override
public View getView(int position, View convertView, ViewGroup parent) {
Fruit fruit = getItem(position); // 获取当前项的Fruit实例
View view = LayoutInflater.from(getContext()).inflate(resourceId, null);
ImageView fruitImage = (ImageView) view.findViewById(R.id.fruit_image);
TextView fruitName = (TextView) view.findViewById(R.id.fruit_name);
fruitImage.setImageResource(fruit.getImageId());
fruitName.setText(fruit.getName());
return view;
}
}


private List<Fruit> fruitList = new ArrayList<Fruit>();
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
initFruits(); // 初始化水果数据
FruitAdapter adapter = new FruitAdapter(MainActivity.this, R.layout.fruit_item, fruitList);
ListView listView = (ListView) findViewById(R.id.list_view);
listView.setAdapter(adapter);


private void initFruits() {
Fruit apple = new Fruit("Apple", R.drawable.apple_pic);
fruitList.add(apple);
Fruit banana = new Fruit("Banana", R.drawable.banana_pic);
fruitList.add(banana);
...


性能优化

View view;
if (convertView == null) {
view = LayoutInflater.from(getContext()).inflate(resourceId, null);
} else {
view = convertView;
}

convertView 重用

ViewHolder 避免频繁 findViewById


class ViewHolder {
ImageView fruitImage;
TextView fruitName;
}

view.setTag(viewHolder);


listview 点击事件

listView.setOnItemClickListener(new OnItemClickListener() {
@Override
public void onItemClick(AdapterView<?> parent, View view,
int position, long id) {
Fruit fruit = fruitList.get(position);
Toast.makeText(MainActivity.this, fruit.getName(),
Toast.LENGTH_SHORT).show();
}
});


单位 px pt dp sp

px 像素 屏幕中可以显示的最小元素单元
pt 磅数 1磅等于1/72英寸 一般作为字体的单位
dp 密度无关像素 也被称作dip
sp 可伸缩像素  采用和dp同样的设计理念，解决了文字大小的适配问题

DPI 屏幕密度 屏幕每英寸所包含的像素数 

float xdpi = getResources().getDisplayMetrics().xdpi;
float ydpi = getResources().getDisplayMetrics().ydpi;
Log.d("MainActivity", "xdpi is " + xdpi);
Log.d("MainActivity", "ydpi is " + ydpi);

120(低密度) 160(基准) 240 320  ...
0.75 1.0 1.5 2.0  ...

在160dpi的屏幕上，1dp等于1px，而在320dpi的屏幕上，1dp就等于2px

android:layout_width="200px"
android:layout_width="200dp"


Nine-Patch
sdk/tools/draw9patch.bat

android:background="@drawable/message_left"
message_left.png
message_left.9.png

聊天界面

public class Msg {
public static final int TYPE_RECEIVED = 0;
public static final int TYPE_SENT = 1;
private String content;
private int type;

class ViewHolder {
LinearLayout leftLayout;
LinearLayout rightLayout;
TextView leftMsg;
TextView rightMsg;
}
// 如果是收到的消息，则显示左边的消息布局，将右边的消息布局隐藏
viewHolder.leftLayout.setVisibility(View.VISIBLE);
viewHolder.rightLayout.setVisibility(View.GONE);
viewHolder.leftMsg.setText(msg.getContent());

发送消息处理

public void onClick(View v) {
String content = inputText.getText().toString();
if (!"".equals(content)) {
Msg msg = new Msg(content, Msg.TYPE_SENT);
msgList.add(msg);
adapter.notifyDataSetChanged(); // 当有新消息时，刷新ListView中的显示
msgListView.setSelection(msgList.size()); // 将ListView定位到最后一行
inputText.setText(""); // 清空输入框中的内容
}
}

EditText 字体颜色设置 RGB  0000ff 蓝色
android:textColor="#0000ff"
水平线性布局   EditText android:layout_weight="1"  Button 不设置layout_weight
EditText会占用剩下的所有空间



第4章 fragment

p160 
碎片  新闻列表 新闻详情（标题+具体内容）

android.app.Fragment
android.support.v4.app.Fragment 兼容包 用于兼容低版本的系统

android.support.v4.app.Fragment 与 android.support.v4.app.FragmentActivity 一起使用


FragmentAddActivity extends  FragmentActivity 

android.support.v4.app.FragmentActivity;
android.support.v4.app.FragmentManager;
android.support.v4.app.FragmentTransaction;

注意要配对使用





使用 fragment 标签在布局中添加碎片 
android:name 碎片类全名 


<fragment
android:id="@+id/fragmentLeft"
android:name="com.dyyx.androidhello.fragment.LeftFragment"
android:layout_width="0dp"
android:layout_height="match_parent"
android:layout_weight="1" />

android:layout_width="0dp" 与 layout_weight 一起使用

动态添加碎片

getFragmentManager
cannot convert from android.app.FragmentManager to android.support.v4.app.FragmentManager

XxxActivity extends android.support.v4.app.FragmentActivity 
 getSupportFragmentManager()



动态添加 fragment  

RightFragment2 fragment = new RightFragment2();
FragmentManager fragmentManager = getSupportFragmentManager();

FragmentTransaction transaction = fragmentManager.beginTransaction();
transaction.replace(R.id.layoutRight, fragment);		
// 添加到返回栈		
transaction.addToBackStack(null);
transaction.commit();


碎片和活动之间通讯

RightFragment rightFragment = (RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);
MainActivity activity = (MainActivity) getActivity();

fragment.getActivity() 



 碎片之间 通信

先在一个碎片中得到与它相关联的活动，然后再通过这个活动去获取另外一个碎片


碎片的生命周期

运行 暂停 停止 销毁

FragmentTransaction remove replace  
addToBackStack


1. onAttach()
当碎片和活动建立关联的时候调用。
2. onCreateView()
为碎片创建视图（加载布局）时调用。
3. onActivityCreated()
确保与碎片相关联的活动一定已经创建完毕的时候调用。
4. onDestroyView()
当与碎片关联的视图被移除的时候调用。
5. onDetach()
当碎片和活动解除关联的时候调用。

动态加载布
Qualifiers 限定符


layout-large

  常见的限定符

  屏幕 大小 分辨率 方向


small 提供给小屏幕设备的资源
normal 提供给中等屏幕设备的资源
large 提供给大屏幕设备的资源
xlarge 提供给超大屏幕设备的资源

ldpi 提供给低分辨率设备的资源（120dpi以下）
mdpi 提供给中等分辨率设备的资源（120dpi到160dpi）
hdpi 提供给高分辨率设备的资源（160dpi到240dpi）
xhdpi 提供给超高分辨率设备的资源（240dpi到320dpi）

land 提供给横屏设备的资源
port 提供给竖屏设备的资源


最小宽度限定符  Smallest-width Qualifier

以dp为单位

layout-sw600dp

最小宽度限定符是在Android 3.2版本引入

横屏时  宽度 高度分别是多少？






简易新闻实例

手机版和Pad版 

横屏 双页模式
竖屏 单页模式

 android:padding
 android:singleLine 单行显示

 android:ellipsize 当文本内容超出控件宽度时，文本的缩略方式， end表示在尾部进行缩略

细线 分割线 
ImageView 显示 一张很窄的图片  android:scaleType属性设置为fitXY


第5章  广播 



Broadcast Receiver
标准广播 和有序广播
Normal broadcasts  异步执行 所有接收者接收广播消息 没有先后顺序 无法截断
有序广播 Ordered broadcasts） 同步执行 优先级高的先接收消息 然后向后传递或截断

系统级别的广播 开机 电池电量变化 网络状态变化 

注册方式  静态注册 动态注册


BroadcastReceiver onReceive()方法

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    intentFilter = new IntentFilter();
    intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
    networkChangeReceiver = new NetworkChangeReceiver();
    registerReceiver(networkChangeReceiver, intentFilter);
}
@Override
protected void onDestroy() {
    super.onDestroy();
    unregisterReceiver(networkChangeReceiver);
}




NetworkChangeReceiver extends BroadcastReceiver


@Override
public void onReceive(Context context, Intent intent) {
Toast.makeText(context, "network changes", Toast.LENGTH_SHORT).show();
}


android.net.conn.CONNECTIVITY_ CHANGE


动态注册与反注册    registerReceiver    unregisterReceiver


ConnectivityManager connectionManager = (ConnectivityManager)
getSystemService(Context.CONNECTIVITY_SERVICE);
NetworkInfo networkInfo = connectionManager.getActiveNetworkInfo();

if (networkInfo != null && networkInfo.isAvailable()) {
   Toast.makeText(context, "network is available",
   Toast.LENGTH_SHORT).show();
} else {
   Toast.makeText(context, "network is unavailable",
   Toast.LENGTH_SHORT).show();
}

查询系统网络状态 权限 
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>


所有的权限列表

http://developer.android.com/reference/android/Manifest.permission.html

静态注册实现开机启动



public class BootCompleteReceiver extends BroadcastReceiver {
   @Override
   public void onReceive(Context context, Intent intent) {
        Toast.makeText(context, "Boot Complete", Toast.LENGTH_LONG).show();
   }
}

<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />


<receiver android:name=".BootCompleteReceiver" >
    <intent-filter>
       <action android:name="android.intent.action.BOOT_COMPLETED" />
    </intent-filter>
</receiver>

不要在onReceive()方法中添加过多的逻辑或者进行任何的耗时操作，因为在广播接收器中是不允许开启线程的，
当onReceive()方法运行了较长时间而没有结束时，程序就会报错。


发送自定义广播
    Intent intent = new Intent("com.example.broadcasttest. MY_BROADCAST");
    sendBroadcast(intent);

发送有序广播 

   Intent intent = new Intent("com.example.broadcasttest. MY_BROADCAST");
   sendOrderedBroadcast(intent, null);

    接收端 优先级设置
    <receiver android:name=".MyBroadcastReceiver">
       <intent-filter android:priority="100" >
           <action android:name="com.example.broadcasttest.MY_BROADCAST"/>
       </intent-filter>
    </receiver>


    截断 广播 abortBroadcast();




本地广播

LocalBroadcastManager

本地广播无法通过静态注册的方式来接收！！！

广播的最佳实践  实现强制下线功能


 在别处登录后， 弹出对话框告知用户，登出后跳转到登录界面


git





第6章  数据持久化 p231

 数据存储
 文件  SharedPreference 数据库SqlLite sd卡  

Context openFileOutput() 
文件名  默认存储到/data/data/<package name>/files/目录下
操作模式 MODE_PRIVATE  MODE_APPEND （追加 ）
MODE_PRIVATE 默认 覆盖   
Android 4.2版本中被废弃的 2种模式  MODE_WORLD_READABLE MODE_WORLD_WRITEABLE  其他应用可读 可写

FileOutputStream
BufferedWriter

String data = "Data to save";
FileOutputStream out = null;
BufferedWriter writer = null;

out = openFileOutput("data", Context.MODE_PRIVATE);
writer = new BufferedWriter(new OutputStreamWriter(out));
writer.write(data);
writer.close();


DDMS  File Explorer 查看文件内容

读取文件  Context openFileInput()

FileInputStream in = null;
BufferedReader reader = null;
StringBuilder content = new StringBuilder();

in = openFileInput("data");
reader = new BufferedReader(new InputStreamReader(in));
String line = "";

while ((line = reader.readLine()) != null) {
content.append(line);
}

reader.close():

EditText edit;
edit.setSelection(inputText.length());
设置光标位置


SharedPreferences

获取 SharedPreferences 对象的三种方式

 Context getSharedPreferences() 
  文件名  存储目录  /data/data/<package name>/shared_prefs/ 
 两种操作模式   MODE_PRIVATE  MODE_MULTI_PROCESS

 MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE这两种模式已在Android 4.2版本中被废弃

Activity类中的getPreferences()方法  不需要文件名 将当前活动的类名作为文件名

PreferenceManager类中的getDefaultSharedPreferences()方法

getString() getInt() getBoolean()


<CheckBox android:id="@+id/remember_pass" android:layout_height="wrap_content" />
 rememberPass.isChecked()   检查复选框是否被选中

SharedPreferences.Editor editor; 
clear  commit

SQLiteOpenHelper
onCreate() onUpgrade()  创建 升级数据库

getReadableDatabase() getWritableDatabase()

SQLiteOpenHelper 构造函数 

第一个参数 Context
第二个参数 数据库名
第三个参数 在查询数据的时候返回一个自定义的 Cursor，一般传入null
第四个参数 当前数据库的版本号，可用于对数据库进行升级操作

数据库文件存放目录 /data/data/<package name>/databases/ 

create table Book (
id integer primary key autoincrement,
author text,
price real,
pages integer,
name text)


private Context mContext;

public MyDatabaseHelper(Context context, String name, CursorFactory factory, int version) {
  super(context, name, factory, version);
  mContext = context;
}
@Override
public void onCreate(SQLiteDatabase db) {
  db.execSQL(CREATE_BOOK);
  Toast.makeText(mContext, "Create succeeded", Toast.LENGTH_SHORT).show();
}


@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

}


dbHelper = new MyDatabaseHelper(this, "BookStore.db", null, 1);
dbHelper.getWritableDatabase();

使用 platform-tools 的 adb 查看数据库
adb shell
cd /data/data/com.example.databasetest/databases/

BookStore.db BookStore.db-journal
sqlite3 BookStore.db
.table  列出表
.schema 查看建表语句
.exit .quit退出


数据库不存在时执行 onCreat
数据库版本需要升级时 通过版本号判断 执行 onUpgrade


CRUD  Create Retrieve Update Delete


 调用SQLiteOpenHelper的getReadableDatabase()或getWritableDatabase()方法是可以用于创建和升级数据库的，
 这两个方法还都会返回一个SQLiteDatabase对象，借助这个对象就可以对数据进行操作

insert  ContentValues


SQLiteDatabase db = dbHelper.getWritableDatabase();
ContentValues values = new ContentValues();
// 开始组装第一条数据
values.put("name", "The Da Vinci Code");
values.put("author", "Dan Brown");
values.put("pages", 454);
values.put("price", 16.96);
db.insert("Book", null, values); // 插入第一条数据
values.clear();
// 开始组装第二条数据
values.put("name", "The Lost Symbol");
values.put("author", "Dan Brown");
values.put("pages", 510);
values.put("price", 19.95);
db.insert("Book", null, values); // 插入第二条数据


SQLiteDatabase db = dbHelper.getWritableDatabase();
ContentValues values = new ContentValues();
values.put("price", 10.99);
db.update("Book", values, "name = ?", new String[] { "The Da Vinci Code" });


SQLiteDatabase db = dbHelper.getWritableDatabase();
db.delete("Book", "pages > ?", new String[] { "500" });

query方法

第一个参数 表名
第二个参数  指定查询哪几列，如果不指定则默认查询所有列
第三第四个参数  约束查询某一行或某几行的数据，不指定则查询所有行的数据
第五个参数 指定group by列，不指定则不进行group by操作
第六个参数 用于对group by之后的数据进行进一步的过滤，不指定则不进行过滤
第七个参数 指定查询结果的排序方式 ，不指定则使用默认的排序方式


query()方法返回一个Cursor对象，从这个对象获取数据 


SQLiteDatabase db = dbHelper.getWritableDatabase();
// 查询Book表中所有的数据
Cursor cursor = db.query("Book", null, null, null, null, null, null);
if (cursor.moveToFirst()) {
do {
// 遍历Cursor对象，取出数据并打印
String name = cursor.getString(cursor. getColumnIndex("name"));
String author = cursor.getString(cursor. getColumnIndex("author"));
int pages = cursor.getInt(cursor.getColumnIndex ("pages"));
double price = cursor.getDouble(cursor. getColumnIndex("price"));

} while (cursor.moveToNext());
cursor.close();


 boolean moveToFirst();
 boolean moveToNext();

直接使用SQL来操作数据库

添加数据的方法如下：
db.execSQL("insert into Book (name, author, pages, price) values(?, ?, ?, ?)",
new String[] { "The Da Vinci Code", "Dan Brown", "454", "16.96" });
db.execSQL("insert into Book (name, author, pages, price) values(?, ?, ?, ?)",
new String[] { "The Lost Symbol", "Dan Brown", "510", "19.95" });
更新数据的方法如下：
db.execSQL("update Book set price = ? where name = ?", new String[] { "10.99", "The Da Vinci Code" });
删除数据的方法如下：
db.execSQL("delete from Book where pages > ?", new String[] { "500" });

查询数据的方法如下：
db.rawQuery("select * from Book", null);

除了查询数据的时候调用的是SQLiteDatabase的rawQuery()方法，其他的操作都是调用的execSQL()方法


使用事务


SQLiteDatabase db = dbHelper.getWritableDatabase();
try{
     db.beginTransaction(); // 开启事务
     ...
     db.setTransactionSuccessful(); // 事务已经执行成功  提交事务
}finally{
   db.endTransaction(); // 结束事务
}

数据库升级最佳实践

增量更新 版本判断

@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      switch (oldVersion) {
         case 1:
             db.execSQL(CREATE_CATEGORY);
         case 2:
             db.execSQL("alter table Book add column category_id integer");
         default:
}
}



第7章  内容提供者

 跨应用共享数据 p279

跨程序跨应用数据共享
Content Provider 


电话簿 短信 媒体库

数据访问 ContentResolve  Context getContentResolver()

注意与 SQLiteDatabase  对比
Uri参数
 权限（authority） 路径（path）
权限用于对不同的应用做区分的，为了避免冲突，一般采用程序包名的方式来命名。
比如某个程序的包名是com.example.app，那么该程序对应的权限为com.example.app.provider

路径则用于对同一应用中不同的表做区分

比如某个程序的数据库里存在两张表，table1和table2
URI   com.example.app.provider/table1 com.example.app.provider/table2
在前面加上协议

content://com.example.app.provider/table1
content://com.example.app.provider/table2

Uri uri = Uri.parse("content://com.example.app.provider/table1")
Cursor cursor = getContentResolver().query(uri,projection,selection,selectionArgs,sortOrder);

if (cursor != null) {
    while (cursor.moveToNext()) {
       String column1 = cursor.getString(cursor.getColumnIndex("column1"));
       int column2 = cursor.getInt(cursor.getColumnIndex("column2"));
    }
    cursor.close();
}

ContentValues values = new ContentValues();
values.put("column1", "text");
values.put("column2", 1);
getContentResolver().insert(uri, values);


ContentValues values = new ContentValues();
values.put("column1", "");
getContentResolver().update(uri, values, "column1 = ? and column2 = ?", new String[] {"text", "1"});
getContentResolver().delete(uri, "column2 = ?", new String[] { "1" });

读取联系人

Cursor cursor = null;
 
// 查询联系人数据
cursor = getContentResolver().query(
ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
null, null, null, null);
while (cursor.moveToNext()) {
// 获取联系人姓名
String displayName = cursor.getString(cursor.getColumnIndex(
ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
// 获取联系人手机号
String number = cursor.getString(cursor.getColumnIndex(
ContactsContract.CommonDataKinds.Phone.NUMBER));
contactsList.add(displayName + "\n" + number);
}
cursor.close();

<uses-permission android:name="android.permission.READ_CONTACTS" />



创建自己的内容提供者


ContentProvider类六个抽象方法


public class MyProvider extends ContentProvider {
    @Override
    public boolean onCreate() {
        return false;
    }
    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
       return null;
    }
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        return null;
    }
    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
       return 0;
    }
    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
       return 0;
    }
    @Override
    public String getType(Uri uri) {
       return null;
    }
 }


getType 根据传入的内容URI来返回相应的MIME类型


content://com.example.app.provider/table1
content://com.example.app.provider/table1/1

* 表示匹配任意长度的任意字符
# 表示匹配任意长度的数字

content://com.example.app.provider/*
content://com.example.app.provider/table1/#


UriMatcher addURI()


URI对应的MIME字符串主要由三部分组分

1. 必须以vnd开头。
2. 如果URI以路径结尾，则后接android.cursor.dir/ 如果内容URI以id结尾，则后接android.cursor.item/ 
3. 最后接上vnd.<authority>.<path> 

content://com.example.app.provider/table1 对应 

vnd.android.cursor.dir/vnd.com.example.app.provider.table1

content://com.example.app.provider/table1/1 对应

vnd.android.cursor.item/vnd.com.example.app.provider.table1

<provider
android:name="com.example.databasetest.DatabaseProvider"
android:authorities="com.example.databasetest.provider" >
</provider>


git p303






第8章  多媒体  p311

Notification

活动 广播接收器 里都可以创建

NotificationManager manager = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);


状态栏通知Notification、NotificationManager详解 
http://blog.csdn.net/feng88724/article/details/6259071

添加振动
notification.defaults |= Notification.DEFAULT_VIBRATE;  
long[] vibrate = {0,100,200,300};  
notification.vibrate = vibrate; 

<uses-permission android:name="android.permission.VIBRATE"></uses-permission>  


接收 发送短信 p321


接收到短信时,系统广播 android.provider.Telephony.SMS_RECEIVED 
<uses-permission android:name="android.permission.RECEIVE_SMS" />
短信拦截

发送

<uses-permission android:name="android.permission.SEND_SMS" />

静态 动态注册都无法接收到短信广播


 

android.telephony.SmsManager;
android.telephony.SmsMessage;

SmsManager smsManager = SmsManager.getDefault();
String to = editTextSmsTo.getText().toString();
to = "10086";
String content = editTextSmsContent.getText().toString();
smsManager.sendTextMessage(to, null,content, null, null);

public void sendTextMessage(
            String destinationAddress, String scAddress, String text,
            PendingIntent sentIntent, PendingIntent deliveryIntent)

每条短信的长度不得超过160个字符  可以把短信分割成多条短信来发送 
sendMultipart- TextMessage()


摄像头和相册

91助手 驱动

Eclipse DDMS视图 devices


Environment.getExternalStorageDirectory()
/storage/emulated/0

ddms / File Expolorer

window / show view /other / android
devices 
File Explorer
LogCat
Resource Explorer

音频 视频播放

MediaPlayer


File file = new File(Environment.getExternalStorageDirectory(), "music.mp3");
mediaPlayer.setDataSource(file.getPath()); // 指定音频文件的路径
mediaPlayer.prepare(); // 让MediaPlayer进入到准备状态

VideoView

视频格式  播放效率


第9章  服务  p356

 Symbian Android  iOS

service 
Thread run start
Runnable

子线程中更新UI
android.view.ViewRoot$CalledFromWrongThreadException 

Handler
public void handleMessage(Message msg)


Message message = new Message();
message.what = UPDATE_TEXT;
handler.sendMessage(message); // 将Message对象发送出去

android.os.Message

android中的异步消息处理

 Message Handler MessageQueue Looper



AsyncTask

doInBackground() 执行具体的耗时任务
onProgressUpdate() UI操作
onPostExecute()  执行一些任务的收尾工作

new DownloadTask().execute();

service

onCreate() onStartCommand() onDestroy()

binder 

重复解绑
java.lang.IllegalArgumentException: Service not registered: com.dyyx.androidhello.ServiceActivity$2@424148c0


 onBind 方法中需返回一个IBinder实例 否则onServiceConnected方法不会调用
onServiceDisconnected() 在连接正常关闭的情况下不会被调用的, 只在Service 被破坏了或者被杀死的时候调用

BIND_AUTO_CREATE  活动和服务进行绑定后自动创建服务 
onCreate()方法会被执行，但onStartCommand()方法不会执行


service可以和多个activity绑定，返回同一个binder实例？ 待验证
unbind 呢 ？

对一个服务既调用了startService()方法，又调用了bindService()方法
这种情况下要同时调用stopService()和unbindService()方法，onDestroy()方法才会执行

调用startForeground()方法后就会让MyService变成一个前台服务，并在系统状态栏显示出来
必须和通知一起使用 ？





前台服务
IntentService

后台定时任务

java Timer  
Android的Alarm 机制
休眠 导致Timer无法运行
Alarm 则不会，唤醒cpu      唤醒CPU和唤醒屏幕 是梁惠事情
AlarmManager manager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);

 设定一个任务在10秒钟后执行 
long triggerAtTime = SystemClock.elapsedRealtime() + 10 * 1000;
manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime, pendingIntent);

或者

long triggerAtTime = System.currentTimeMillis() + 10 * 1000;
manager.set(AlarmManager.RTC_WAKEUP, triggerAtTime, pendingIntent);

ELAPSED_REALTIME ELAPSED_REALTIME_WAKEUP   RTC  RTC_WAKEUP

SystemClock.elapsedRealtime() 获取系统开机至今所经历时间的毫秒数 

System.currentTimeMillis() 获取  1970年1月1日0点至今所经历时间的毫秒数 


AlarmManager setExact()方法替代set()方法， 可以保证任务准时执行


AlarmManager manager = (AlarmManager) getSystemService(ALARM_SERVICE);
long oneMinute =   60L * 1000L; 
long triggerAtTime = SystemClock.elapsedRealtime() + oneMinute;
Intent i = new Intent(this, AlarmRecv.class);
PendingIntent pi = PendingIntent.getBroadcast(this, 0, i, 0);
manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime, pi);

pendingIntent深入理解 http://blog.csdn.net/yuzhiboyi/article/details/8484771

要得到一个pendingIntent对象，使用方法类的静态方法
getActivity(Context, int, Intent, int),getBroadcast(Context, int, Intent, int),getService(Context, int, Intent, int) 
分别对应着Intent的3个行为，跳转到一个activity组件、打开一个广播组件和打开一个服务组件。




service 定时启动自己   ？


第10章  网络技术   p394


webview

HttpURLConnection
HttpClient

URL url = new URL("http://www.baidu.com");
HttpURLConnection connection = (HttpURLConnection) url.openConnection();

connection.setRequestMethod("GET");
connection.setConnectTimeout(8000);
connection.setReadTimeout(8000);
InputStream in = connection.getInputStream();
connection.disconnect();


Message message = new Message();
message.what = SHOW_RESPONSE;
// 将服务器返回的结果存放到Message中
message.obj = response.toString();

handler.sendMessage(message);


connection.setRequestMethod("POST");
DataOutputStream out = new DataOutputStream(connection.getOutputStream());
out.writeBytes("username=admin&password=123456");

xml  解析
pull  sax
json 解析

org.json.JSONArray

javax.xml.parsers.SAXParserFactory;
org.xmlpull.v1.XmlPullParserFactory


gson


Gson gson = new Gson();
Person person = gson.fromJson(jsonData, Person.class);

List<Person> peoples = gson.fromJson(jsonData, new TypeToken<List<Person>>() {}.getType());


http网络库封装 

public interface HttpCallbackListener {
    void onFinish(String response);
    void onError(Exception e);
}

第11章  位置服务 LBS p427

Location Based Service

定位  LocationManager

LocationManager locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
String provider = LocationManager.NETWORK_PROVIDER;
Location location = locationManager.getLastKnownLocation(provider);

Location对象中包含了经度、纬度、海拔等一系列的位置信息

一般有三种位置提供器可供选择，GPS_PROVIDER、NETWORK_PROVIDER和PASSIVE_PROVIDER
前两种使用的比较多 分别表示使用GPS定位和使用网络定位
GPS定位的精准度比较高，但是非常耗电，而网络定位的精准度稍差，但耗电量比较少

List<String> providerList = locationManager.getProviders(true);
返回支持的位置提供器

getLastKnownLocation() 获取到设备当前的位置信息
requestLocationUpdates() 添加位置监听器

<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

Geocoding API   google

百度地图

 java.lang.RuntimeException: Unable to instantiate activity ComponentInfo{com.dyyx.androidhello/com.dyyx.androidhello.LbsActivity}:
 java.lang.IllegalStateException: System services not available to Activities before onCreate()

locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); 
需要在onCreate方法里调用


红米2  打开定位

设置 / 其他高级设置 / 安全和隐私 / 位置

locationManager.requestLocationUpdates(defaultProvider, 5000, 1, locationListener);

	location = locationManager.getLastKnownLocation(provider);

LocationManager mgr = (LocationManager) getSystemService(Context.LOCATION_SERVICE);  
Location location = mgr.getLastKnownLocation(bundle.getString("provider"));  
while(location  == null){  
  mgr.requestLocationUpdates("gps", 60000, 1, locationListener);  
} 

http://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.96145&sensor=false


googleapis  geocode

办公室获取的经纬度
http://maps.googleapis.com/maps/api/geocode/json?latlng=30.282719,120.023083&sensor=false
latlng
latitude longitude  纬度 经度

Window/Preferences/Android/Build
C:\Users\gang.dug\.android\debug.keystore

keystore创建

keytool -list -v –keystore  keystoreFile

百度地图sdk


jar  so 文件

armeabi 目录







第12章  传感器 p459

光照传感器 加速度传感器 地磁传感器 压力传感器 温度传感器




第13章  高级技巧

全局获取Context

android.app.Application

@Override
public void onCreate() {
		super.onCreate();
		context = getApplicationContext();

使用Intent传递复杂对象

Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
intent.putExtra("string_data", "hello");
intent.putExtra("int_data", 100);
startActivity(intent);



getIntent().getStringExtra("string_data");
getIntent().getIntExtra("int_data", 0);

 Serializable  Parcelable

Person person = new Person();
person.setName("Tom");
person.setAge(20);
Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
intent.putExtra("person_data", person);
startActivity(intent);

Person person = (Person) getIntent().getSerializableExtra("person_data");





Person person = (Person) getIntent().getParcelableExtra("person_data");


日志定制工具  定义输出级别

public class LogUtil {
public static final int VERBOSE = 1;
public static final int DEBUG = 2;
public static final int INFO = 3;
public static final int WARN = 4;
public static final int ERROR = 5;
public static final int NOTHING = 6;
public static final int LEVEL = VERBOSE;


public static void v(String tag, String msg) {
   if (LEVEL <= VERBOSE) {
     log.v(tag, msg);
   }
}

Log.v() Log.d() Log.i() Log.w() Log.e()

debug
Debug As / Android Application

单元测试




第14章  实战 天气app  p497



第15章  将应用发布到google play




	
第20章 TODO

0. 自定义控件 layout

1. 手机 横屏时  宽度 高度分别是多少？

2. 简易新闻实例 横屏 双页模式 竖屏 单页模式

3. 强制下线例子

4. 登陆记住密码功能

5. 数据提供者实例

6. 静态 动态注册都无法接收到短信广播

7. 从相册选取图片没有进入裁剪并显示

8. service 定时启动自己 ？

9. 百度地图sdk使用

10.  单元测试

















