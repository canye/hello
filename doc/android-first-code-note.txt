


第一行代码读书笔记思维导图
https://pic3.zhimg.com/f580d9169d8292417d0c72935fcc983a_r.jpg



第一章 安卓简介


2003.10 andy Rubin  android公司
2005.08 谷歌收购
2008.09 1.0
2011.02 3.0
2011.10 4.0





系统架构 
linux内核 系统运行层  应用框架曾  用用层

四大组件 activity  service broadcat ContentProvider

控件 SqlLite LBS 多媒体 传感器

Dalvik虚拟机


开发环境 
Android SDK
eclipse ADT
Android Studio

AndroidManifest.xml
LogCat工具 

assets  程序动态读取的文件  webview 加载本地网页


<activity
android:name="com.test.helloworld.HelloWorldActivity"
android:label="@string/app_name" >
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>

setContentView(R.layout.hello_world_layout);

getMenuInflater().inflate(R.menu.hello_world, menu);


菜单 option menu  context menu

onCreateOptionsMenu
android:text="@string/hello_world"

字符串定义 res/values/strings.xml




第二章 activity

Intent 显示 隐式
activity生命周期
不可见 可见 获取焦点
4中启动模式   standard singleTop SingleTask singleInstance
使用task来管理活动 一个task是一个活动栈
出栈入栈
如何查看task     adb shell dumpsys activity

 Running activities (most recent first):
   TaskRecord{b3ac20a8 #10 A com.dyyx.androidhello.MainActivity U 0}
     Run #2: ActivityRecord{b3aca2d8 com.dyyx.androidhello/.ListViewActivity}
     Run #1: ActivityRecord{b3899b48 com.dyyx.androidhello/.MainActivity}

 隐藏标题栏

requestWindowFeature(Window.FEATURE_NO_TITLE);
setContentView(R.layout.first_layout);


requestWindowFeature 需要在 setContentView 之前

Toast.makeText(FirstActivity.this, "You clicked Button 1",Toast.LENGTH_SHORT).show();

findViewById 


<menu xmlns:android="http://schemas.android.com/apk/res/android" >
<item
android:id="@+id/add_item"
android:title="Add"/>
<item
android:id="@+id/remove_item"
android:title="Remove"/>
</menu>

public boolean onCreateOptionsMenu(Menu menu) {
getMenuInflater().inflate(R.menu.main, menu);
return true;
}

public boolean onOptionsItemSelected(MenuItem item) {
switch (item.getItemId()) {
case R.id.add_item:
Toast.makeText(this, "You clicked Add", Toast.LENGTH_SHORT).show();
break;
case R.id.remove_item:
Toast.makeText(this, "You clicked Remove", Toast.LENGTH_SHORT).show();
break;
default:
}
return true;
}

销毁当前活动 finish()

Intent  
显式 Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
隐式 Intent intent = new Intent("com.example.activitytest.ACTION_START");



<activity android:name=".SecondActivity" >
<intent-filter>
<action android:name="com.example.activitytest.ACTION_START" />
<category android:name="android.intent.category.DEFAULT" />
</intent-filter>
</activity>

打开浏览器 

Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.baidu.com"));
startActivity(intent);

setData

schema host port  path mimeType

拨打电话界面 

Intent intent = new Intent(Intent.ACTION_DIAL);
intent.setData(Uri.parse("tel:10086"));
startActivity(intent);

传递参数

String data = "Hello SecondActivity";
Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
intent.putExtra("extra_data", data);
startActivity(intent);

获取参数

Intent intent = getIntent();
String data = intent.getStringExtra("extra_data");

返回数据给上一个活动
startActivityForResult()

Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
startActivityForResult(intent, 1);




Intent intent = new Intent();
intent.putExtra("data_return", "Hello FirstActivity");
setResult(RESULT_OK, intent);
finish();

protected void onActivityResult(int requestCode, int resultCode, Intent data) {
switch (requestCode) {
case 1:
if (resultCode == RESULT_OK) {
String returnedData = data.getStringExtra("data_return");
Log.d("FirstActivity", returnedData);
}
break;
default:
}
}

返回键 onBackPressed




DialogActivity
<activity android:name=".DialogActivity" android:theme="@android:style/ Theme.Dialog" >



第三章  UI控件
 P87 

xmlns:android="http://schemas.android.com/apk/res/android"

基本布局  TextView EditText Button  
常用控件
match_parent fill_parent wrap_content
match_parent fill_parent 效果相同 推荐用 match_parent
TextView android:gravity="center"  文字居中
android:textSize="24sp"
android:textColor="#00ff00"

EditText 
android:hint="input something here"
android:maxLines="2"

click事件监听接口 OnClickListener

String inputText = editText.getText().toString();
Toast.makeText(MainActivity.this, inputText, Toast.LENGTH_SHORT).show();

ImageView
android:src="@drawable/ic_launcher"

imageView.setImageResource(R.drawable.jelly_bean);

ProgressBar
android:visibility

visible invisible gone

invisible 不可见，但仍然占据着原来的位置和大小，可以理解成变透明了
gone 不可见且不占用空间

setVisibility()方法 View.VISIBLE View.INVISIBLE View.GONE

通过 android:max属性给进度条设置一个最大值，然后在代码中动态地设置进度

int progress = progressBar.getProgress();
progress = progress + 10;
progressBar.setProgress(progress);

ProgressBar 样式 圆形进度条 水平进度条 style

      style="@android:style/Widget.ProgressBar.Horizontal"
  android:max="100"
 android:progress="50"

AlertDialog

AlertDialog.Builder

setPositiveButton()设置确定按钮点击事件
setNegativeButton()设置取消按钮点击事件

ProgressDialog

ProgressDialog progressDialog = new ProgressDialog (MainActivity.this);
progressDialog.setTitle("This is ProgressDialog");
progressDialog.setMessage("Loading...");
progressDialog.setCancelable(true);
progressDialog.show();

setCancelable()设置 false，表示不能通过Back键取消

dismiss()关闭对话框


layout

android:orientation   vertical  horizontal


android:layout_gravity  VS android:gravity

android:layout_gravity 用于指定控件在布局中的对齐方式

当LinearLayout的排列方向是horizontal时，只有垂直方向上的对齐方式才会生效


<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal" >

<Button
android:id="@+id/button1"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="top"
android:text="Button 1" />
<Button
android:id="@+id/button2"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="center_vertical"
android:text="Button 2" />
<Button
android:id="@+id/button3"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:layout_gravity="bottom"
android:text="Button 3" />
</LinearLayout>

android:layout_weigh


<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="horizontal" >
<EditText
android:id="@+id/input_message"
android:layout_width="0dp"
android:layout_height="wrap_content"
android:layout_weight="1"
android:hint="Type something"
/>
<Button
android:id="@+id/send"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Send"
/>
</LinearLayout>

Button 宽度按照wrap_content计算 EditText会占满屏幕所有的剩余空间


RelativeLayout p117


RelativeLayout
相对于父布局
android:layout_alignParentLeft="true"
android:layout_alignParentTop="true"

android:layout_alignParentRight="true"
android:layout_alignParentTop="true"

android:layout_centerInParent="true"

android:layout_alignParentBottom="true"
android:layout_alignParentLeft="true"

android:layout_alignParentBottom="true"
android:layout_alignParentRight="true"


相对于指定控件


android:layout_above="@id/button3"
android:layout_toRightOf="@id/button3"

FrameLayout

TableLayout

TableRow

android:layout_span="2"
android:stretchColumns="1"  第二列拉伸




自定义控件

View ViewGroup


android:background="@drawable/title_bg"
自定义标题栏
back按钮 标题 编辑按钮
android:layout_margin="5dip"

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" >
<include layout="@layout/title" />
</LinearLayout>

include


public class TitleLayout extends LinearLayout {
public TitleLayout(Context context, AttributeSet attrs) {
super(context, attrs);
LayoutInflater.from(context).inflate(R.layout.title, this);
}
}

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" >
<com.example.uicustomviews.TitleLayout
android:layout_width="match_parent"
android:layout_height="wrap_content"
></com.example.uicustomviews.TitleLayout>
</LinearLayout>

增加事件处理函数

ListView

<ListView
android:id="@+id/list_view"
android:layout_width="match_parent"
android:layout_height="match_parent" >
</ListView>

private String[] data = { "Apple", "Banana", "Orange", "Watermelon",
"Pear", "Grape", "Pineapple", "Strawberry", "Cherry", "Mango" };

ArrayAdapter<String> adapter = new ArrayAdapter<String>(
MainActivity.this, android.R.layout.simple_list_item_1, data);
ListView listView = (ListView) findViewById(R.id.list_view);
listView.setAdapter(adapter);

 /**
     * Constructor
     *
     * @param context The current context.
     * @param resource The resource ID for a layout file containing a TextView to use when
     *                 instantiating views.
     * @param objects The objects to represent in the ListView.
     */
    public ArrayAdapter(Context context, int resource, T[] objects) {
        init(context, resource, 0, Arrays.asList(objects));
    }

android.R.layout.simple_list_item_1 作为ListView子项布局的id，
这是一个Android内置的布局文件，里面只有一个TextView，可用于简单地显示一段文本



public class Fruit {
private String name;
private int imageId;


fruit_item.xml
  ImageView TextView

public class FruitAdapter extends ArrayAdapter<Fruit> {
private int resourceId;
public FruitAdapter(Context context, int textViewResourceId,
List<Fruit> objects) {
super(context, textViewResourceId, objects);
resourceId = textViewResourceId;
}
@Override
public View getView(int position, View convertView, ViewGroup parent) {
Fruit fruit = getItem(position); // 获取当前项的Fruit实例
View view = LayoutInflater.from(getContext()).inflate(resourceId, null);
ImageView fruitImage = (ImageView) view.findViewById(R.id.fruit_image);
TextView fruitName = (TextView) view.findViewById(R.id.fruit_name);
fruitImage.setImageResource(fruit.getImageId());
fruitName.setText(fruit.getName());
return view;
}
}


private List<Fruit> fruitList = new ArrayList<Fruit>();
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
initFruits(); // 初始化水果数据
FruitAdapter adapter = new FruitAdapter(MainActivity.this, R.layout.fruit_item, fruitList);
ListView listView = (ListView) findViewById(R.id.list_view);
listView.setAdapter(adapter);


private void initFruits() {
Fruit apple = new Fruit("Apple", R.drawable.apple_pic);
fruitList.add(apple);
Fruit banana = new Fruit("Banana", R.drawable.banana_pic);
fruitList.add(banana);
...


性能优化

View view;
if (convertView == null) {
view = LayoutInflater.from(getContext()).inflate(resourceId, null);
} else {
view = convertView;
}

convertView 重用

ViewHolder 避免频繁 findViewById


class ViewHolder {
ImageView fruitImage;
TextView fruitName;
}

view.setTag(viewHolder);


listview 点击事件

listView.setOnItemClickListener(new OnItemClickListener() {
@Override
public void onItemClick(AdapterView<?> parent, View view,
int position, long id) {
Fruit fruit = fruitList.get(position);
Toast.makeText(MainActivity.this, fruit.getName(),
Toast.LENGTH_SHORT).show();
}
});


单位 px pt dp sp

px 像素 屏幕中可以显示的最小元素单元
pt 磅数 1磅等于1/72英寸 一般作为字体的单位
dp 密度无关像素 也被称作dip
sp 可伸缩像素  采用和dp同样的设计理念，解决了文字大小的适配问题

DPI 屏幕密度 屏幕每英寸所包含的像素数 

float xdpi = getResources().getDisplayMetrics().xdpi;
float ydpi = getResources().getDisplayMetrics().ydpi;
Log.d("MainActivity", "xdpi is " + xdpi);
Log.d("MainActivity", "ydpi is " + ydpi);

120(低密度) 160(基准) 240 320  ...
0.75 1.0 1.5 2.0  ...

在160dpi的屏幕上，1dp等于1px，而在320dpi的屏幕上，1dp就等于2px

android:layout_width="200px"
android:layout_width="200dp"


Nine-Patch
sdk/tools/draw9patch.bat

android:background="@drawable/message_left"
message_left.png
message_left.9.png

聊天界面

public class Msg {
public static final int TYPE_RECEIVED = 0;
public static final int TYPE_SENT = 1;
private String content;
private int type;

class ViewHolder {
LinearLayout leftLayout;
LinearLayout rightLayout;
TextView leftMsg;
TextView rightMsg;
}
// 如果是收到的消息，则显示左边的消息布局，将右边的消息布局隐藏
viewHolder.leftLayout.setVisibility(View.VISIBLE);
viewHolder.rightLayout.setVisibility(View.GONE);
viewHolder.leftMsg.setText(msg.getContent());

发送消息处理

public void onClick(View v) {
String content = inputText.getText().toString();
if (!"".equals(content)) {
Msg msg = new Msg(content, Msg.TYPE_SENT);
msgList.add(msg);
adapter.notifyDataSetChanged(); // 当有新消息时，刷新ListView中的显示
msgListView.setSelection(msgList.size()); // 将ListView定位到最后一行
inputText.setText(""); // 清空输入框中的内容
}
}

EditText 字体颜色设置 RGB  0000ff 蓝色
android:textColor="#0000ff"
水平线性布局   EditText android:layout_weight="1"  Button 不设置layout_weight
EditText会占用剩下的所有空间



第4章 fragment

p160 
碎片  新闻列表 新闻详情（标题+具体内容）

android.app.Fragment
android.support.v4.app.Fragment 兼容包 用于兼容低版本的系统

android.support.v4.app.Fragment 与 android.support.v4.app.FragmentActivity 一起使用


FragmentAddActivity extends  FragmentActivity 

android.support.v4.app.FragmentActivity;
android.support.v4.app.FragmentManager;
android.support.v4.app.FragmentTransaction;

注意要配对使用





使用 fragment 标签在布局中添加碎片 
android:name 碎片类全名 


<fragment
android:id="@+id/fragmentLeft"
android:name="com.dyyx.androidhello.fragment.LeftFragment"
android:layout_width="0dp"
android:layout_height="match_parent"
android:layout_weight="1" />

android:layout_width="0dp" 与 layout_weight 一起使用

动态添加碎片

getFragmentManager
cannot convert from android.app.FragmentManager to android.support.v4.app.FragmentManager

XxxActivity extends android.support.v4.app.FragmentActivity 
 getSupportFragmentManager()



动态添加 fragment  

RightFragment2 fragment = new RightFragment2();
FragmentManager fragmentManager = getSupportFragmentManager();

FragmentTransaction transaction = fragmentManager.beginTransaction();
transaction.replace(R.id.layoutRight, fragment);		
// 添加到返回栈		
transaction.addToBackStack(null);
transaction.commit();


碎片和活动之间通讯

RightFragment rightFragment = (RightFragment) getFragmentManager().findFragmentById(R.id.right_fragment);
MainActivity activity = (MainActivity) getActivity();

fragment.getActivity() 



 碎片之间 通信

先在一个碎片中得到与它相关联的活动，然后再通过这个活动去获取另外一个碎片


碎片的生命周期

运行 暂停 停止 销毁

FragmentTransaction remove replace  
addToBackStack


1. onAttach()
当碎片和活动建立关联的时候调用。
2. onCreateView()
为碎片创建视图（加载布局）时调用。
3. onActivityCreated()
确保与碎片相关联的活动一定已经创建完毕的时候调用。
4. onDestroyView()
当与碎片关联的视图被移除的时候调用。
5. onDetach()
当碎片和活动解除关联的时候调用。

动态加载布
Qualifiers 限定符


layout-large

  常见的限定符

  屏幕 大小 分辨率 方向


small 提供给小屏幕设备的资源
normal 提供给中等屏幕设备的资源
large 提供给大屏幕设备的资源
xlarge 提供给超大屏幕设备的资源

ldpi 提供给低分辨率设备的资源（120dpi以下）
mdpi 提供给中等分辨率设备的资源（120dpi到160dpi）
hdpi 提供给高分辨率设备的资源（160dpi到240dpi）
xhdpi 提供给超高分辨率设备的资源（240dpi到320dpi）

land 提供给横屏设备的资源
port 提供给竖屏设备的资源


最小宽度限定符  Smallest-width Qualifier

以dp为单位

layout-sw600dp

最小宽度限定符是在Android 3.2版本引入

横屏时  宽度 高度分别是多少？






简易新闻实例

手机版和Pad版 

横屏 双页模式
竖屏 单页模式

 android:padding
 android:singleLine 单行显示

 android:ellipsize 当文本内容超出控件宽度时，文本的缩略方式， end表示在尾部进行缩略

细线 分割线 
ImageView 显示 一张很窄的图片  android:scaleType属性设置为fitXY


第5章 全局大喇叭，详解广播机制




第6章  数据持久化

第7章  内容提供者

第8章  多媒体


第9章  服务

第10章  网络技术

第11章  位置服务 LBS


第12章  传感器


第13章  高级技巧


第14章  实战 天气app


第15章  将应用发布到google play




	
第20章 TODO

1. 手机 横屏时  宽度 高度分别是多少？

2. 简易新闻实例 横屏 双页模式 竖屏 单页模式










