


apache-tomcat-7.0.68

端口号 
conf/server.xml


<Server port="8005" shutdown="SHUTDOWN">
<Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000"
               redirectPort="8443" />
<Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />

8080 HTTP监听端口
8005 关闭端口   telnet 127.0.0.1 8005 > shutdown
8009 与apache等集成 连接端口   
8443 https 端口

Apache和Tomcat结合
Apache拦截请求，将servlet和JSP请求通过AJP交给Tomcat处理，拿到结果后返回


Apache HTTP Server 与 Tomcat 的三种连接方式介绍
http://www.ibm.com/developerworks/cn/opensource/os-lo-apache-tomcat/index.html


1 mod_jk   
    
    httpd.conf  workers.properties uriworkermap.properties
     通过 AJP 协议与 Tomcat 进行通讯，Tomcat 默认的 AJP Connector 端口 8009
     mod_jk 模块

# (httpd.conf)
# 加载 mod_jk 模块
LoadModule jk_module modules/mod_jk.so

#
# Configure mod_jk
#

JkWorkersFile conf/workers.properties
JkMountFile conf/uriworkermap.properties
JkLogFile logs/mod_jk.log
JkLogLevel warn

#
# workers.properties
#


# list the workers by name

worker.list=DLOG4J, status

# localhost server 1
# ------------------------
worker.s1.port=8109
worker.s1.host=localhost
worker.s1.type=ajp13

# localhost server 2
# ------------------------
worker.s2.port=8209
worker.s2.host=localhost
worker.s2.type=ajp13
worker.s2.stopped=1

worker.DLOG4J.type=lb
worker.retries=3
worker.DLOG4J.balanced_workers=s1, s2
worker.DLOG4J.sticky_session=1

worker.status.type=status


2  http_proxy

  利用 Apache 自带的 mod_proxy 模块使用代理技术来连接 Tomcat
   
确保使用的是 2.2.x 版本的 Apache 服务器。因为 2.2.x 版本对这个模块进行了重写，大大的增强了其功能和稳定性。
必须启用 Tomcat 的 HTTP Connector

ProxyPass /images !
ProxyPass /css !
ProxyPass /js !
ProxyPass / http://localhost:8080/

ProxyPass /images !
ProxyPass /css ! 
ProxyPass /js !

ProxyPass / balancer://example/
<Proxy balancer://example/>
BalancerMember http://server1:8080/
BalancerMember http://server2:8080/
BalancerMember http://server3:8080/
</Proxy>


3 ajp_proxy

  与  http_proxy 类似 把 http:// 换成 ajp:// 
  连接 Tomcat 的 AJP Connector 

mod_proxy 相关的模块有 
mod_proxy.so
mod_proxy_connect.so
mod_proxy_http.so
mod_proxy_ftp.so
mod_proxy_ajp.so  Apache 2.2.x 才有


后两种配置简单 ，并且很灵活，不过稳定性可能要差一些





