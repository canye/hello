
双十一背后的技术力量

arch summit  架构峰会



1号店11.11：从应用架构落地点谈高可用高并发高性能
手机淘宝 521 性能优化项目揭秘
京东商品搜索系统架构设计
当当促销系统与交易系统的重构实践
苏宁系统拆分的一些经验谈
蘑菇街私有云平台的Docker应用实践
唯品会峰值系统应对实践
支付宝和蚂蚁花呗的技术架构及实践


天猫 京东 蘑菇街

交易额、交易峰值、支付峰值

高可用高并发高性能
分布式、高可扩展




///////////////// 1号店11.11：从应用架构落地点谈高可用高并发高性能



能落地的架构才是好架构，当然我们更缺的是好架构的落地点

1号店应用架构的演进大致经历了以下历程：
强依赖-> Service化->业务解耦->读写分离->异步->水平/垂直拆分->服务逻辑分组等。

SOA 服务化  

 监控和问题定位   日志

下单接口业务性强，可用、并发、性能要求

错误码 规范

RPC框架

Hessian   


业务垂直拆分
产品 用户 订单

文描、价格、库存、下单、订单查询等垂直服务

读写分离 
    订单主库 下单 订单更新和实时查询
    订单备库 非实时查询  离线计算

水平拆分 oracle迁 mysql


SOA中间件-Hedwig


服务自动注册发现、软负载均衡、节点踢出与复活、服务动态逻辑分组、请求自动重试等功能

并行请求、灰度发布 

调用链路及层次关系、日志分析、监控预警等

Haproxy  到 Hedwig 演进

apps > haproxy  >  services
apps > Hedwig > services


技术层面  读写分离、水平拆分、逻辑分组
业务流程的梳理、优化、改造   业务架构

业务解耦/异步

缓存  批量操作

业务梳理 业务场景细分
核心业务 与 非核心业务

异步本身不是什么高深的技术，关键是哪些业务可以走异步，这更体现架构师的业务理解能力和 综合能力。

下单成功后给用户的消息通知、发票详细信息的生成等都可以异步，
在不牺牲用户体验又保证业务流程完整的情况下，尽量走异步解耦，这对可用、性能都是极大的提升。


一个下单接口定义了135个错误编码


错误出现一个解决一个，系统自然越来越健壮和稳定

特价商品已售完无库存等

Service服务可用性99.9999%  6个9


销售库存准确率 超卖率

业务监控   订单监控

从实际订单数据和Service接口调用量两个维度去做监控，
保证了监控系统的稳定和准确（监控系统也会出错的），
其中下单接口调用量使用的就是Service日志数据。


服务监控  实时调用量 依赖


///////////////////



